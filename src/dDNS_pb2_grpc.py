# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import dDNS_pb2 as dDNS__pb2


class rpcServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ask = channel.unary_unary(
                '/rpcService/Ask',
                request_serializer=dDNS__pb2.ID.SerializeToString,
                response_deserializer=dDNS__pb2.ID.FromString,
                )
        self.AskForData = channel.unary_unary(
                '/rpcService/AskForData',
                request_serializer=dDNS__pb2.FORDATA.SerializeToString,
                response_deserializer=dDNS__pb2.DATASET.FromString,
                )
        self.ToPre = channel.unary_unary(
                '/rpcService/ToPre',
                request_serializer=dDNS__pb2.TOPRE.SerializeToString,
                response_deserializer=dDNS__pb2.NULL.FromString,
                )
        self.ToSuc = channel.unary_unary(
                '/rpcService/ToSuc',
                request_serializer=dDNS__pb2.TOSUC.SerializeToString,
                response_deserializer=dDNS__pb2.NULL.FromString,
                )
        self.Quit = channel.unary_unary(
                '/rpcService/Quit',
                request_serializer=dDNS__pb2.ID.SerializeToString,
                response_deserializer=dDNS__pb2.NULL.FromString,
                )
        self.Add = channel.unary_unary(
                '/rpcService/Add',
                request_serializer=dDNS__pb2.ADD.SerializeToString,
                response_deserializer=dDNS__pb2.RESP.FromString,
                )
        self.Remove = channel.unary_unary(
                '/rpcService/Remove',
                request_serializer=dDNS__pb2.DEL.SerializeToString,
                response_deserializer=dDNS__pb2.RESP.FromString,
                )
        self.Modify = channel.unary_unary(
                '/rpcService/Modify',
                request_serializer=dDNS__pb2.MODIFY.SerializeToString,
                response_deserializer=dDNS__pb2.RESP.FromString,
                )
        self.Query = channel.unary_unary(
                '/rpcService/Query',
                request_serializer=dDNS__pb2.QUERY.SerializeToString,
                response_deserializer=dDNS__pb2.RESP.FromString,
                )


class rpcServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Ask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AskForData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ToPre(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ToSuc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Quit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Add(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Remove(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Modify(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Query(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_rpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ask': grpc.unary_unary_rpc_method_handler(
                    servicer.Ask,
                    request_deserializer=dDNS__pb2.ID.FromString,
                    response_serializer=dDNS__pb2.ID.SerializeToString,
            ),
            'AskForData': grpc.unary_unary_rpc_method_handler(
                    servicer.AskForData,
                    request_deserializer=dDNS__pb2.FORDATA.FromString,
                    response_serializer=dDNS__pb2.DATASET.SerializeToString,
            ),
            'ToPre': grpc.unary_unary_rpc_method_handler(
                    servicer.ToPre,
                    request_deserializer=dDNS__pb2.TOPRE.FromString,
                    response_serializer=dDNS__pb2.NULL.SerializeToString,
            ),
            'ToSuc': grpc.unary_unary_rpc_method_handler(
                    servicer.ToSuc,
                    request_deserializer=dDNS__pb2.TOSUC.FromString,
                    response_serializer=dDNS__pb2.NULL.SerializeToString,
            ),
            'Quit': grpc.unary_unary_rpc_method_handler(
                    servicer.Quit,
                    request_deserializer=dDNS__pb2.ID.FromString,
                    response_serializer=dDNS__pb2.NULL.SerializeToString,
            ),
            'Add': grpc.unary_unary_rpc_method_handler(
                    servicer.Add,
                    request_deserializer=dDNS__pb2.ADD.FromString,
                    response_serializer=dDNS__pb2.RESP.SerializeToString,
            ),
            'Remove': grpc.unary_unary_rpc_method_handler(
                    servicer.Remove,
                    request_deserializer=dDNS__pb2.DEL.FromString,
                    response_serializer=dDNS__pb2.RESP.SerializeToString,
            ),
            'Modify': grpc.unary_unary_rpc_method_handler(
                    servicer.Modify,
                    request_deserializer=dDNS__pb2.MODIFY.FromString,
                    response_serializer=dDNS__pb2.RESP.SerializeToString,
            ),
            'Query': grpc.unary_unary_rpc_method_handler(
                    servicer.Query,
                    request_deserializer=dDNS__pb2.QUERY.FromString,
                    response_serializer=dDNS__pb2.RESP.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class rpcService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Ask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpcService/Ask',
            dDNS__pb2.ID.SerializeToString,
            dDNS__pb2.ID.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AskForData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpcService/AskForData',
            dDNS__pb2.FORDATA.SerializeToString,
            dDNS__pb2.DATASET.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ToPre(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpcService/ToPre',
            dDNS__pb2.TOPRE.SerializeToString,
            dDNS__pb2.NULL.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ToSuc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpcService/ToSuc',
            dDNS__pb2.TOSUC.SerializeToString,
            dDNS__pb2.NULL.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Quit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpcService/Quit',
            dDNS__pb2.ID.SerializeToString,
            dDNS__pb2.NULL.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Add(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpcService/Add',
            dDNS__pb2.ADD.SerializeToString,
            dDNS__pb2.RESP.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Remove(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpcService/Remove',
            dDNS__pb2.DEL.SerializeToString,
            dDNS__pb2.RESP.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Modify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpcService/Modify',
            dDNS__pb2.MODIFY.SerializeToString,
            dDNS__pb2.RESP.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpcService/Query',
            dDNS__pb2.QUERY.SerializeToString,
            dDNS__pb2.RESP.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
